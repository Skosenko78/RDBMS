CREATE SCHEMA store;
SET search_path = store, pg_catalog;

CREATE TABLE store.ptype
(
 id     int GENERATED BY DEFAULT AS IDENTITY,
 name   varchar(100)
);

CREATE TABLE store.discount_all
(
 id       int GENERATED BY DEFAULT AS IDENTITY,
 value    int NOT NULL CHECK (value > 0),
 set_date date NOT NULL,
 end_date date NOT NULL CHECK (end_date >= set_date)
);

CREATE TABLE store.price
(
 id       int GENERATED BY DEFAULT AS IDENTITY,
 value    numeric(15,4) NOT NULL CHECK (value > 0),
 set_date date NOT NULL,
 end_date date NOT NULL CHECK (end_date >= set_date)
);

CREATE TABLE store.address
(
 id              int GENERATED BY DEFAULT AS IDENTITY,
 index           numeric(6) NOT NULL,
 city_name       text NOT NULL,
 street_name     text NULL,
 building_number char(10) NOT NULL,
 corpus_number   char(5) NULL,
 room_number     char(10) NULL
);

CREATE TABLE store.producer
(
 id           int GENERATED BY DEFAULT AS IDENTITY,
 name         text NOT NULL,
 phone_number char(12) NULL,
 email        varchar(100) NULL,
 fk_address   int NOT NULL,
 url          varchar(100) NULL
);

CREATE TABLE store.provider
(
 id           int GENERATED BY DEFAULT AS IDENTITY,
 name         text NOT NULL,
 phone_number char(12) NULL,
 email        varchar(100) NULL,
 fk_address   int NOT NULL,
 url          varchar(100) NULL
);

CREATE TABLE store.product
(
 id              char(7),
 name            text NOT NULL,
 fk_provider     int NOT NULL,
 fk_price        int NOT NULL,
 fk_ptype        int NOT NULL,
 fk_producer     int NOT NULL,
 prod_date       date NOT NULL CHECK (prod_date <= current_date),
 fk_discount_all int NULL
);

CREATE TABLE store.status
(
 id     int GENERATED BY DEFAULT AS IDENTITY,
 name   varchar(100)
);

CREATE TABLE store.discount_cust
(
 id        numeric(6),
 value     int NOT NULL CHECK (value > 0),
 datestamp date NOT NULL,
 expired   boolean NOT NULL
);

CREATE TABLE store.customer
(
 id               int GENERATED BY DEFAULT AS IDENTITY,
 first_name       text NOT NULL,
 second_name      text NOT NULL,
 fathers_name     text NULL,
 phone_number     char(12) NULL,
 email            varchar(100) NOT NULL,
 fk_address       int NOT NULL,
 fk_discount_cust numeric(6) NULL,
 register_date    date NOT NULL
);

CREATE TABLE store.order
(
 id          int GENERATED BY DEFAULT AS IDENTITY,
 fk_status   int NOT NULL,
 fk_customer int NOT NULL,
 datestamp   date NOT NULL
);

CREATE TABLE store.order_full
(
 fk_order   int NOT NULL,
 fk_product char(7) NOT NULL,
 quantity   int NOT NULL CHECK ( quantity > 0 ) 
);

INSERT INTO store.price
(value, set_date, end_date)
VALUES(345.2300, '2023-04-24', '2023-07-24'),
(1000.8765, '2023-04-15', '2023-06-15');

INSERT INTO store.address (index, city_name, street_name, building_number, corpus_number, room_number)
VALUES (197350, 'Санкт-Петербург', 'ул. Ленина', 10, 2, 127),
(188345, 'Бугры', 'ул. Шоссейная', 5, null, null),
(197123, 'Санкт-Петербург', 'Лесной пр.', 34, null, 35),
(188589, 'Девяткино', null, 15, 1, 68),
(150543, 'Москва', 'ул. Тверская', 6, 3, 148),
(197834, 'Санкт-Петербург', 'ул. Есенина', 4, null, 73),
(150556, 'Москва', 'Индустриальный пр.', 78, 2, null);

INSERT INTO store.provider
(name, phone_number, email, fk_address, url)
VALUES ('Поставщик1', '+79111234566', NULL, 3, 'https://provider1.org'),
('Поставщик2', NULL, 'prov@provider2.org', 1, NULL),
('Поставщик3', '8124523597', 'prov@provider3.org', 4, 'https://provider3.org');

INSERT INTO store.producer
(name, phone_number, email, fk_address, url)
VALUES ('Производитель1', '+79111234566', NULL, 3, 'https://producer1.org'),
('Производитель2', NULL, 'produce@producer2.org', 1, 'https://producer2.org'),
('Производитель3', '+79213458756', 'produce@producer3.org', 4, 'https://producer3.org');

INSERT INTO store.status
(name)
VALUES ('Выдан'), ('Готов к выдаче'), ('В доставке'), ('Новый')

INSERT INTO store.discount_cust
(id, value, datestamp, expired)
VALUES (000001, 1, '2022-04-12', false),
(000002, 1, '2021-04-10', false),
(000003, 2, '2020-02-09', true),
(000004, 2, '2023-02-02', false)

INSERT INTO store.customer
(first_name, second_name, fathers_name, phone_number, email, fk_address, fk_discount_cust, register_date)
VALUES ('Валерий', 'Тихонов', 'Анотольевич', '+79114596825', 'va.tikhonov@mail.ru', 3, null, '2023-03-10'),
('Евгения', 'Алексеева', 'Ивановна', '+79045893478', 'ei.alekseeva@gmail.com', 1, 000001, '2023-02-25'),
('Николай', 'Егоров', 'Витальевич', '+70791452932', 'nv.egorov@gmail.com', 5, 000002, '2023-02-25')

INSERT INTO store.order
(fk_status, fk_customer, datestamp)
VALUES (4, 5, '2023-04-02'),
(4, 6, '2023-03-27'),
(4, 6, '2023-04-25')

ALTER TABLE ONLY store.ptype
		ADD CONSTRAINT ptype_pkey PRIMARY KEY (id);
	
ALTER TABLE ONLY store.discount_all
		ADD CONSTRAINT discount_all_pkey PRIMARY KEY (id);
	
ALTER TABLE ONLY store.price
		ADD CONSTRAINT price_pkey PRIMARY KEY (id);
	
ALTER TABLE ONLY store.address
		ADD CONSTRAINT address_pkey PRIMARY KEY (id);
	
ALTER TABLE ONLY store.producer
		ADD CONSTRAINT producer_pkey PRIMARY KEY (id),
		ADD CONSTRAINT producer_address_fkey FOREIGN KEY (fk_address) REFERENCES store.address(id);
	
ALTER TABLE ONLY store.provider
		ADD CONSTRAINT provider_pkey PRIMARY KEY (id),
		ADD CONSTRAINT provider_address_fkey FOREIGN KEY (fk_address) REFERENCES store.address(id);
	
ALTER TABLE ONLY store.product
		ADD CONSTRAINT product_pkey PRIMARY KEY (id),
		ADD CONSTRAINT product_discount_all_fkey FOREIGN KEY (fk_discount_all) REFERENCES store.discount_all(id),
 		ADD CONSTRAINT product_price_fkey FOREIGN KEY (fk_price) REFERENCES store.price(id),
 		ADD CONSTRAINT product_producer_fkey FOREIGN KEY (fk_producer) REFERENCES store.producer(id),
 		ADD CONSTRAINT product_provider_fkey FOREIGN KEY (fk_provider) REFERENCES store.provider(id),
 		ADD CONSTRAINT product_ptype_fkey FOREIGN KEY (fk_ptype) REFERENCES store.ptype(id);

ALTER TABLE ONLY store.status
		ADD CONSTRAINT status_pkey PRIMARY KEY (id);
	
ALTER TABLE ONLY store.discount_cust
		ADD CONSTRAINT discount_cust_pkey PRIMARY KEY (id);
 		
ALTER TABLE ONLY store.customer
		ADD CONSTRAINT customer_pkey PRIMARY KEY (id),
		ADD CONSTRAINT customer_address_fkey FOREIGN KEY (fk_address) REFERENCES store.address(id),
 		ADD CONSTRAINT customer_discount_cust_fkey FOREIGN KEY (fk_discount_cust) REFERENCES store.discount_cust(id);
 		
ALTER TABLE ONLY store.order
		ADD CONSTRAINT order_pkey PRIMARY KEY (id),
		ADD CONSTRAINT order_customer_fkey FOREIGN KEY (fk_customer) REFERENCES store.customer(id),
 		ADD CONSTRAINT order_status_fkey FOREIGN KEY (fk_status) REFERENCES store.status(id);
 		
ALTER TABLE ONLY store.order_full
		ADD CONSTRAINT order_full_order_fkey FOREIGN KEY (fk_order) REFERENCES store.order(id),
 		ADD CONSTRAINT order_product_fkey FOREIGN KEY (fk_product) REFERENCES store.product(id);